from typing import List, Dict, Optional

from fastapi import APIRouter, Depends
from pydantic import BaseModel
from sqlalchemy import func
from sqlalchemy.orm import contains_eager
from starlette.responses import Response

from app.orm.race import RaceOrm
from app.orm.klass import KlassOrm
from app.models.race import RaceModel
from .helpers import (
    PaginationRequestSchema,
    PaginationResponseSchema,
    build_sorting_schema,
    build_filtering_schema,
    select,
    has_session,
    has_pagination,
    has_sorting,
)

router = APIRouter(
    prefix="/races",
    tags=["races"],
)

SORTING_FILTER_FIELDS = [
    RaceOrm.id,
    RaceOrm.name,
    RaceOrm.default_klass_id,
    RaceOrm.default_klass_name,
    RaceOrm.full_text,
]

SortingRequestSchema, SortingResponseSchema = build_sorting_schema(
    "Race", SORTING_FILTER_FIELDS
)

EAGER_LOAD_OPTIONS = [contains_eager(RaceOrm.default_klass)]


class RacesIndexSchema(BaseModel):
    data: List[RaceModel]
    pagination: PaginationResponseSchema
    sorting: SortingResponseSchema


pagination_depend = has_pagination()
sorting_depend = has_sorting(SortingRequestSchema)


@router.get("", response_model=RacesIndexSchema, include_in_schema=False)
@router.get("/", response_model=RacesIndexSchema)
def index(
    session=Depends(has_session),
    pagination: PaginationRequestSchema = Depends(pagination_depend),
    sorting: SortingRequestSchema = Depends(sorting_depend),
):
    races_count = select(func.count(RaceOrm.id.distinct())).get_scalar(session)
    races_orm = (
        select(RaceOrm)
        .join(KlassOrm)
        .options(*EAGER_LOAD_OPTIONS)
        .pagination(pagination)
        .sorting(sorting)
        .get_scalars(session)
    )
    races_model = RaceModel.from_orm_list(races_orm)
    return RacesIndexSchema(
        data=races_model,
        pagination=PaginationResponseSchema.from_request(
            pagination, races_count
        ),
        sorting=SortingResponseSchema.from_orm(sorting),
    )


FilterSchema = build_filtering_schema("Race", SORTING_FILTER_FIELDS)


class RacesSearchSchema(BaseModel):
    data: List[RaceModel]
    filter: FilterSchema
    pagination: PaginationResponseSchema
    sorting: SortingResponseSchema


class RacesSearchRequest(BaseModel):
    filter: FilterSchema
    pagination: Optional[PaginationRequestSchema] = PaginationRequestSchema()
    sorting: Optional[SortingRequestSchema] = SortingRequestSchema()


@router.post("/search", response_model=RacesSearchSchema)
def search(search: RacesSearchRequest, session=Depends(has_session)):
    races_count = (
        select(func.count(RaceOrm.id.distinct()))
        .filters(search.filter.filters)
        .join(KlassOrm)
        .get_scalar(session)
    )
    races_orm = (
        select(RaceOrm)
        .filters(search.filter.filters)
        .join(KlassOrm)
        .options(*EAGER_LOAD_OPTIONS)
        .pagination(search.pagination)
        .sorting(search.sorting)
        .get_scalars(session)
    )
    races_model = RaceModel.from_orm_list(races_orm)
    return RacesSearchSchema(
        data=races_model,
        filter=search.filter,
        pagination=PaginationResponseSchema.from_request(
            search.pagination, races_count
        ),
        sorting=SortingResponseSchema.from_orm(search.sorting),
    )


class RacesGetSchema(BaseModel):
    data: RaceModel


@router.get("/{race_id}", response_model=RacesGetSchema)
def get(race_id: str, session=Depends(has_session)):
    races_orm = (
        select(RaceOrm)
        .join(KlassOrm)
        .options(*EAGER_LOAD_OPTIONS)
        .where(RaceOrm.where_slug_or_id(race_id))
        .get_scalar(session)
    )
    races_model = RaceModel.from_orm(races_orm)
    return RacesGetSchema(data=races_model)


@router.get(
    "/{race_id}/images/icon.png",
    # Set what the media type will be in the autogenerated OpenAPI specification.
    # fastapi.tiangolo.com/advanced/additional-responses/#additional-media-types-for-the-main-response
    responses={200: {"content": {"image/png": {}}}},
    # Prevent FastAPI from adding "application/json" as an additional
    # response media type in the autogenerated OpenAPI specification.
    # https://github.com/tiangolo/fastapi/issues/3258
    response_class=Response,
)
def fetch_class_icon(race_id: int, session=Depends(has_session)):
    png = (
        select(RaceOrm.icon_raw)
        .where(RaceOrm.id == race_id)
        .get_scalar(session)
    )

    headers = {"Cache-Control": "public,max-age=604800,immutable"}

    return Response(content=png, media_type="image/png", headers=headers)
